Method 1:

<style>
  .text_marquee_slider {
    display: flex;
    width: 100%;
}
.text_marquee_slider {
    --space: 2rem;
    display: grid;
    align-content: center;
    overflow: hidden;
    gap: var(--space);
    width: 100%;
    font-family: Corben,system-ui,sans-serif;
    font-size: 1.5rem;
    line-height: 1.5;
}
  .img_with_text_marquee {
    width: 100%;
}
.img_with_text_marquee .text_marquee_slider_wrapper {
    z-index: 1;
    position: relative;
    display: flex;
    width: 100%;
}
.text_marquee_slider_wrapper .marquee {
    padding: 13.5px 0;
}
.text_marquee_slider{
   --space: 2rem;
  display: grid;
  align-content: center;
  overflow: hidden;
  gap: var(--space);
  width: 100%;
  font-family: "Corben", system-ui, sans-serif;
  font-size: 1.5rem;
  line-height: 1.5;
}
.marquee {
  --duration: 15s;
  --gap: var(--space);
  display: flex;
  overflow: hidden;
  user-select: none;
  gap: 2.4rem;
   
}
.marquee_group {
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: space-around;
  gap: var(--gap);
  min-width: 100%;
  animation: scroll var(--duration) linear infinite;
}
@keyframes scroll {
  0% {
    transform: translateX(0);
  }

  100% {
    transform: translateX(calc(-100% - var(--gap)));
  }
}

  .text_marquee_slider_wrapper .marquee .marquee_group p {
    font-style: italic;
    font-weight: 700;
    font-size: 20px;
    line-height: 23px;
    letter-spacing: -.01em;
    text-transform: capitalize;
    font-family: Poppins;
}

@media only screen and (max-width: 989px) {
    .img_with_text_marquee .text_marquee_slider_wrapper {
        margin-top: 20px;
        margin-bottom: 30px;
    }
}
   .marquee:hover .marquee_group{
  animation-play-state: paused;
} 
</style>


<div class="text_marquee_slider">
<div class="img_with_text_marquee">
  <div class="text_marquee_slider_wrapper">
    <div class="marquee" style="background-color: #000000">
      <div class="marquee_group">

          {%- for block in section.blocks -%}
          <p style="color: #ffffff;">{{block.settings.message}}</p>
         {%- endfor -%}

      </div>
    </div>
  </div>
</div>





</div>
 <script>
      var copy = document.querySelector(".marquee_group").cloneNode(true);
      document.querySelector(".marquee").appendChild(copy);
    </script>
{% schema %}
  {
    "name": "Announcement Bar",
    "settings": [
      {
        "type": "checkbox",
        "id": "show_announcement_bar",
        "label": "Show"
      },
      {
        "type": "color",
        "id": "colorBackground",
        "label": "Background color",
        "default": "#ffffff"
      },
      {
        "type": "color",
        "id": "colorText",
        "label": "Text color",
        "default": "#000"
      }
    ],
    "blocks": [
          {
            "type": "header",
            "name": "Message",
            "settings": [
              {
              "id": "message",
              "type": "textarea",
             "label": "Message"
            }
            ]
          }
      ]
  }
{% endschema %}


















{%- if  section.blocks.size > 0 and section.settings.show_announcement_bar -%}


<style> 


:root {
  --marquee-width: 100vw;
  --marquee-height: 20vh;
  /* --marquee-elements: 12; */ /* defined with JavaScript */
  --marquee-elements-displayed: 5;
  --marquee-element-width: calc(var(--marquee-width) / var(--marquee-elements-displayed));
  --marquee-animation-duration: calc(var(--marquee-elements) * 3s);
}


.marquee {
  width: 100vw;
  height:10vh;
  background-color: #111;
  color: #eee;
  overflow: hidden;
  position: relative;
}

.marquee:before, .marquee:after {
  position: absolute;
  top: 0;
  width: 10rem;
  height: 100%;
  content: "";
  z-index: 1;
}
.marquee:before {
  left: 0;
  background: linear-gradient(to right, #111 0%, transparent 100%);
}
.marquee:after {
  right: 0;
  background: linear-gradient(to left, #111 0%, transparent 100%);
}


.marquee-content {
    list-style: none;
    height: 100%;
    margin-top: 0px;
    /* justify-content: center; */
    align-content: flex;
    display: flex;
  gap:30px;
    /* align-items: center; */
    align-content: center;
    animation: scrolling 10s linear infinite;
}



 .marquee-content:hover {
  animation-play-state: paused;
} 

@keyframes scrolling {
  0% { transform: translateX(0); }
  100% { transform: translateX(calc(-1 * var(--marquee-element-width) * var(--marquee-elements))); }
}

.marquee-content li {
  display: flex;
  justify-content: center;
  align-items: center;
  /* text-align: center; */
  flex-shrink: 0;
  
  max-height: 100%;
  font-size:20px;
  white-space: nowrap;
  color: #fff;
}






@media (max-width: 768px) {

.marquee-content li {
  font-size:15px;
 
}
  
.marquee {
    height: 6vh;
   
}



}


</style> 
 
 
 
 
 
 
 <div class="marquee">
    <ul class="marquee-content">
         {%- for block in section.blocks -%}
        <li style="color: white;">{{block.settings.message}}</li>
          {%- endfor -%}
       

    </ul>
  </div>


<script> 
      const root = document.documentElement;
      const marqueeElementsDisplayed = getComputedStyle(root).getPropertyValue("--marquee-elements-displayed");
      const marqueeContent = document.querySelector("ul.marquee-content");
      
      root.style.setProperty("--marquee-elements", marqueeContent.children.length);
      
      for(let i=0; i<marqueeElementsDisplayed; i++) {
        marqueeContent.appendChild(marqueeContent.children[i].cloneNode(true));
      }


</script> 

{%- endif -%}







{% schema %}
  {
    "name": "Announcement Bar",
    "settings": [
      {
        "type": "checkbox",
        "id": "show_announcement_bar",
        "label": "Show"
      },
      {
        "type": "checkbox",
        "id": "autoplay",
        "label": "Autoplay"
      },
      {
        "type": "text",
        "id": "delay",
        "label": "Delay between transitions (in ms)",
        "default": "5000"
      },
      {
        "type": "color",
        "id": "colorBackground",
        "label": "Background color",
        "default": "#ffffff"
      },
      {
        "type": "color",
        "id": "colorText",
        "label": "Text color",
        "default": "#000"
      }
],
"blocks": [
      {
        "type": "header",
        "name": "Message",
        "settings": [
{
              "id": "message",
              "type": "textarea",
             "label": "Message"
            }
        ]
      }
]
  }
{% endschema %}

{% stylesheet %}
{% endstylesheet %}

{% javascript %}
{% endjavascript %}
